%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 78b2425a2284af743826c689403a4924, type: 3}
  m_Name: Subsurface
  m_EditorClassIdentifier: 
  m_functionInfo: "// Made with Amplify Shader Editor\n// Available at the Unity
    Asset Store - http://u3d.as/y3X \n/*ASEBEGIN\nVersion=18200\n430;382.6667;1494;842;1064;314;1;True;True\nNode;AmplifyShaderEditor.FunctionInput;2;-609,-56;Inherit;False;Light
    Color;3;0;False;1;0;FLOAT3;1,1,1;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;3;-600,35;Inherit;False;NdotL;3;1;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;4;-599,124;Inherit;False;Normal
    WS;3;2;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;5;-615,217;Inherit;False;Subsurface
    Color;3;3;False;1;0;FLOAT3;1,1,1;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.CustomExpressionNode;1;-285,-10;Inherit;False;half3
    LightingSubsurface(half3 lightColor, half3 NdotL, half3 normalWS, half3 subsurfaceColor,
    half subsurfaceRadius) {$    // Calculate normalized wrapped lighting. This spreads
    the light without adding energy.$    // This is a normal lambertian lighting
    calculation (using N dot L), but warping NdotL$    // to wrap the light further
    around an object.$    //$    // A normalization term is applied to make sure
    we do not add energy.$    // http://www.cim.mcgill.ca/~derek/files/jgt_wrap.pdf$$   
    half alpha = subsurfaceRadius@$    half theta_m = acos(-alpha)@ // boundary of
    the lighting function$$    half theta = max(0, NdotL + alpha) - alpha@$    half
    normalization_jgt = (2 + alpha) / (2 * (1 + alpha))@$    half wrapped_jgt = (pow(((theta
    + alpha) / (1 + alpha)), 1 + alpha)) * normalization_jgt@$$    half wrapped_valve
    = 0.25 * (NdotL + 1) * (NdotL + 1)@$    half wrapped_simple = (NdotL + alpha)
    / (1 + alpha)@$$    half3 subsurface_radiance = lightColor * subsurfaceColor
    * wrapped_jgt@$$    return subsurface_radiance@$};3;False;5;False;lightColor;FLOAT3;0,0,0;In;;Inherit;False;False;NdotL;FLOAT3;0,0,0;In;;Inherit;False;True;normalWS;FLOAT3;0,0,0;In;;Inherit;False;True;subsurfaceColor;FLOAT3;0,0,0;In;;Inherit;False;True;subsurfaceRadius;FLOAT;0;In;;Inherit;False;Subsurface;False;False;0;5;0;FLOAT3;0,0,0;False;1;FLOAT3;0,0,0;False;2;FLOAT3;0,0,0;False;3;FLOAT3;0,0,0;False;4;FLOAT;0;False;1;FLOAT3;0\nNode;AmplifyShaderEditor.FunctionInput;6;-618,307;Inherit;False;Subsurface
    Radius;1;4;False;1;0;FLOAT;0.5;False;1;FLOAT;0\nNode;AmplifyShaderEditor.FunctionOutput;0;19,-10;Inherit;False;True;-1;Output;0;False;1;0;FLOAT3;0,0,0;False;1;FLOAT3;0\nWireConnection;1;0;2;0\nWireConnection;1;1;3;0\nWireConnection;1;2;4;0\nWireConnection;1;3;5;0\nWireConnection;1;4;6;0\nWireConnection;0;0;1;0\nASEEND*/\n//CHKSM=44C9FC71E7EBB7DA0AB0D9B8AF760B163D152A3C"
  m_functionName: 
  m_description: 
  m_additionalIncludes:
    m_additionalIncludes: []
    m_outsideIncludes: []
  m_additionalPragmas:
    m_additionalPragmas: []
    m_outsidePragmas: []
  m_additionalDirectives:
    m_validData: 0
    m_isDirty: 0
    m_moduleName: ' Additional Directives'
    m_independentModule: 1
    m_additionalDirectives: []
    m_shaderFunctionDirectives: []
    m_nativeDirectives: []
    m_nativeDirectivesIndex: -1
    m_nativeDirectivesFoldout: 0
    m_directivesSaveItems: []
  m_nodeCategory: 3
  m_customNodeCategory: 
  m_previewPosition: 0
  m_hidden: 0
